
/*
第1章 简介
一、ZooKeeper 客户端功能：保障强一致性、有序性和持久性；实现通用的同步原语的能力。
二、主节点负载过高，导致消息任意延迟。备份主节点最终接管主节点的角色功能。从节点最终停止与原主节点通信，
	而与第二个主要节点建立主从关系。这种现象称为脑裂。（系统中两个或多个部分开始独立工作，导致整体行为不一致性）
三、主从架构需求：
	主节点选举
	崩溃检测
	组成员关系管理
	元数据管理
四、CAP 一致性、可用性、分区容错性。ZooKeeper的设计尽可能满足一致性和可用性。

第2章 了解ZooKeeper
一、znode一共四种类型：持久的、临时的、持久有序的、临时有序的。
	znode监视与通知。
	每一个znode都有一个版本号。
二、ZooKeeper服务器端运行于两种模式：独立模式、仲裁模式（一组ZooKeeper服务器，之间可进行状态复制，并同时为客户端服务。）。
    会话  ZooKeeper客户端可以透明转移一共会话到不同的服务器。
	会话的状态和生命周期 状态（CONNECTING、CONNECTED、CLOSED、NOT_CONNECTED), 发生网络分区时等待CONNECTING.
	server.n=127.0.0.1:2222:2223 (服务器ip地址：仲裁通信端口号：群首选举端口号）  端口号均为TCP。
*/


/************************************************************************/
/* 
从Paxos到ZooKeeper分布式一致性原理与实践
第1章
	1.分布式的特点：分布性、对等性、并发性、缺乏全局时钟、故障总是会发生
	2.分布式环境的各种问题：通信异常、网络分区（脑裂）、三态（成功、失败、超时）、节点故障
	3.ACID CAP/BASE理论

第2章
	1.2PC与3PC协议
	2.2PC 优点：原理简单，实现方便。缺点：同步阻塞、单点故障、脑裂、太过保守。
	3.3PC 优点：降低参与者的阻塞范围，并且能够在出现单点故障后继续达成一致。
		  缺点：在preCommit之后，如果出现网络分区，参与者仍然会进行事物提交，必然出现数据的不一致性。
	4.Paxos算法 拜占庭将军问题



*/
/************************************************************************/